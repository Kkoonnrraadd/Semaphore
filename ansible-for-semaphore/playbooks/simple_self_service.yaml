---
- name: Self-Service Data Refresh - Simple & Reliable
  hosts: localhost
  environment:
    AZURE_CONFIG_DIR: /home/semaphore/.azure
  vars:
    # Script execution order - matches your SelfServiceRefresh structure
    script_order:
      - { step: "0", name: "restore_point", script: "0_restore_point_in_time/RestorePointInTime.ps1", description: "Create restore point" }
      - { step: "1", name: "stop_environment", script: "1_stop_environment/StopEnvironment.ps1", description: "Stop destination environment" }
      - { step: "2a", name: "copy_attachments", script: "2_copy_attachments/CopyAttachments.ps1", description: "Copy attachments" }
      - { step: "2b", name: "copy_database", script: "2_copy_database/copy_database.ps1", description: "Copy database" }
      - { step: "3", name: "adjust_resources", script: "3_adjust_resources/AdjustResources.ps1", description: "Adjust resources" }
      - { step: "6", name: "start_environment", script: "6_start_environment/StartEnvironment.ps1", description: "Start environment" }
      - { step: "7", name: "delete_resources", script: "7_delete_resources/DeleteResources.ps1", description: "Delete temporary resources" }
      - { step: "8", name: "manage_permissions", script: "8_manage_permissions/ManagePermissions.ps1", description: "Manage permissions" }

  pre_tasks:
    - name: Validate required parameters
      ansible.builtin.assert:
        that:
          - source_env is defined
          - dest_env is defined
          - source_sub_id is defined
          - dest_sub_id is defined
          - source_ns is defined
          - dest_ns is defined
          - customer is defined
        fail_msg: |
          ‚ùå Missing required parameters!
          Required: source_env, dest_env, source_sub_id, dest_sub_id, source_ns, dest_ns, customer

    - name: Display execution plan
      ansible.builtin.debug:
        msg: |
          üöÄ Self-Service Data Refresh Execution Plan
          ==========================================
          
          üìä Configuration:
          ‚Ä¢ Source: {{ source_env }} ({{ source_ns }})
          ‚Ä¢ Destination: {{ dest_env }} ({{ dest_ns }})
          ‚Ä¢ Customer: {{ customer }}
          ‚Ä¢ Dry Run: {{ dry_run_mode | default(false) }}
          
          üìù Execution Steps:
          {% for step in script_order %}
          ‚Ä¢ Step {{ step.step }}: {{ step.description }}
          {% endfor %}
          
          ‚è∞ Started at: {{ ansible_date_time.iso8601 }}

    - name: Check PowerShell availability
      ansible.builtin.command: which pwsh
      register: pwsh_check
      failed_when: false
      changed_when: false

    - name: Verify PowerShell Core is available
      ansible.builtin.fail:
        msg: |
          ‚ùå PowerShell Core (pwsh) is not available!
          Please install PowerShell Core in the Semaphore environment.
      when: pwsh_check.rc != 0

    - name: Confirm production execution
      ansible.builtin.pause:
        prompt: |
          ‚ö†Ô∏è PRODUCTION EXECUTION CONFIRMATION
          
          You are about to execute a data refresh from {{ source_env }} to {{ dest_env }}.
          
          This will:
          ‚Ä¢ Stop the {{ dest_env }} environment (DOWNTIME STARTS)
          ‚Ä¢ Copy data from {{ source_env }} 
          ‚Ä¢ Reconfigure {{ dest_env }}
          ‚Ä¢ Start {{ dest_env }} environment
          
          Type 'CONFIRM' to proceed or Ctrl+C to abort:
      register: production_confirm
      when: 
        - not (dry_run_mode | default(false))
        - dest_env in ['prod', 'production', 'prd']

    - name: Abort if not confirmed
      ansible.builtin.fail:
        msg: "‚ùå Production execution not confirmed - operation aborted"
      when:
        - not (dry_run_mode | default(false))
        - dest_env in ['prod', 'production', 'prd']
        - production_confirm.user_input != 'CONFIRM'

  tasks:
    - name: Execute script sequence
      block:
        - name: "Step {{ item.step }}: {{ item.description }}"
          ansible.builtin.shell: |
            set -e
            echo "üöÄ Starting Step {{ item.step }}: {{ item.description }}"
            echo "=================================="
            
            # Check if script exists
            script_path="{{ playbook_dir }}/../roles/self_service_refresh/files/{{ item.script }}"
            if [[ ! -f "$script_path" ]]; then
              echo "‚ö†Ô∏è Script not found: $script_path"
              echo "üìÅ Available scripts:"
              find {{ playbook_dir }}/../roles/self_service_refresh/files/ -name "*.ps1" | head -10
              exit 0  # Don't fail, just skip
            fi
            
            # Check if PowerShell is available
            if ! command -v pwsh &> /dev/null; then
              echo "‚ö†Ô∏è PowerShell Core (pwsh) not available"
              echo "üìã Would execute: pwsh -File $script_path -Source {{ source_env }} -Destination {{ dest_env }} ..."
              echo "‚úÖ Step simulated successfully (PowerShell not available)"
              exit 0
            fi
            
            echo "üìã Executing PowerShell script..."
            pwsh -File "$script_path" \
              -Source "{{ source_env }}" \
              -Destination "{{ dest_env }}" \
              -SourceNamespace "{{ source_ns }}" \
              -DestinationNamespace "{{ dest_ns }}" \
              -CustomerAlias "{{ customer }}" \
              -Cloud "{{ cloud | default('AzureUSGovernment') }}" \
              -MaxWaitMinutes {{ max_wait | default(40) }} \
              -AutoApprove \
              {{ '-DryRun' if (dry_run_mode | default(false)) else '' }} \
              || {
                echo "‚ùå PowerShell script failed with exit code $?"
                {% if dry_run_mode | default(false) %}
                echo "üîç This is expected in dry-run mode without proper Azure setup"
                exit 0
                {% else %}
                exit 1
                {% endif %}
              }
          register: step_result
          loop: "{{ script_order }}"
          when: 
            - skip_steps is not defined or item.name not in (skip_steps | default([]))

        - name: "üìä Results for Step {{ item.item.step }}: {{ item.item.description }}"
          ansible.builtin.debug:
            msg: |
              
              ===============================================
              üìä STEP {{ item.item.step }} RESULTS: {{ item.item.description }}
              ===============================================
              Return Code: {{ item.rc }}
              
              üìù STDOUT:
              {{ item.stdout | default('(no output)') }}
              
              {% if item.stderr %}
              ‚ö†Ô∏è STDERR:
              {{ item.stderr }}
              {% endif %}
              
              Status: {{ '‚úÖ SUCCESS' if item.rc == 0 else '‚ùå FAILED' }}
              ===============================================
              
          loop: "{{ step_result.results }}"
          when: item is not skipped

      rescue:
        - name: Handle execution failure
          ansible.builtin.debug:
            msg: |
              üö® EXECUTION FAILED
              ==================
              Failed step: {{ ansible_failed_task.name }}
              
              ‚ö†Ô∏è MANUAL INTERVENTION REQUIRED
              ‚Ä¢ Check Azure portal for resource states
              ‚Ä¢ Review error messages above
              ‚Ä¢ Consider rollback procedures
              
        - name: Fail with clear error
          ansible.builtin.fail:
            msg: "Self-service refresh failed - see error details above"

  post_tasks:
    - name: Execution summary
      ansible.builtin.debug:
        msg: |
          ‚úÖ Self-Service Data Refresh Completed
          ====================================
          
          üìä Summary:
          ‚Ä¢ Source: {{ source_env }} ‚Üí Destination: {{ dest_env }}
          ‚Ä¢ Customer: {{ customer }}
          ‚Ä¢ Mode: {{ 'DRY RUN' if (dry_run_mode | default(false)) else 'PRODUCTION' }}
          ‚Ä¢ Duration: {{ ansible_date_time.epoch | int - (start_time | default(ansible_date_time.epoch)) | int }} seconds
          ‚Ä¢ Completed: {{ ansible_date_time.iso8601 }}
          
          üéØ Next Steps:
          {% if dry_run_mode | default(false) %}
          ‚Ä¢ Review the dry run output above
          ‚Ä¢ If satisfied, run again without --dry-run
          {% else %}
          ‚Ä¢ Verify {{ dest_env }} environment is operational
          ‚Ä¢ Test application functionality
          ‚Ä¢ Monitor system performance
          {% endif %}
